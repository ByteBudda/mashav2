# -*- coding: utf-8 -*-
# handlers.py
import asyncio
import os
import random
from io import BytesIO
from collections import deque
import time
from typing import Tuple, Deque, Optional, Dict, Any, List
from PIL import Image
from telegram import Update, constants
from telegram.ext import ContextTypes
import pydub
from pydub import AudioSegment

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
from documents_handler import (
    read_pdf, read_docx, read_txt, read_py, generate_document
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º settings –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config
from bot_commands import escape_markdown_v2
from config import (ASSISTANT_ROLE, SYSTEM_ROLE, USER_ROLE,
                    logger, settings, TEMP_MEDIA_DIR)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º/–ë–î
from state import (
    add_to_memory_history, chat_history, last_activity,
    get_user_preferred_name_from_db, get_user_topic_from_db,
    is_user_banned, save_message_and_embed, bot_activity_percentage,
    extract_and_save_facts # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
from utils import (
    filter_response, # generate_content_sync - —É–±—Ä–∞–ª–∏, —Ç.–∫. –µ—Å—Ç—å –æ–±–µ—Ä—Ç–∫–∏
    generate_vision_content_async,
    transcribe_voice, update_user_info,
    _get_effective_style, should_process_message, PromptBuilder,
    generate_with_cache # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–ï–†–¢–ö–£ –î–õ–Ø –ö–≠–®–ê –ò –ú–ï–¢–†–ò–ö
)
# --- –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞ –∏–∑ vector_db ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ to_thread
from vector_db import search_relevant_history_sync, search_relevant_facts_sync

# –°–æ–∑–¥–∞–µ–º PromptBuilder
prompt_builder = PromptBuilder(settings)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
MAX_DOCUMENT_TEXT_LENGTH = 5000 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è LLM

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è _process_generation_and_reply ---
async def _process_generation_and_reply(
    update: Update, context: ContextTypes.DEFAULT_TYPE, history_key: int,
    prompt: str, user_message_text: str, # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_to_message_id_override: Optional[int] = None # –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞ –≤ –ë–î/–∏–Ω–¥–µ–∫—Å.
    """
    chat_id = update.effective_chat.id
    user = update.effective_user
    if not user: return

    user_name = await asyncio.to_thread(get_user_preferred_name_from_db, user.id) or user.first_name or f"User_{user.id}"
    display_user_name = user_name if update.effective_chat.type != 'private' else None

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥ ---
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    await save_message_and_embed(history_key, USER_ROLE, user_message_text, display_user_name)

    await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
    response = ""
    filtered = ""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ –∫—ç—à
        response = await generate_with_cache(prompt)
        logger.info(f"Raw LLM response for key {history_key}: {response[:100]}...")
        filtered = filter_response(response)
        logger.info(f"Filtered response for key {history_key}: {filtered[:100]}...")
    except Exception as e:
        logger.error(f"Generation error in _process_generation_and_reply: {e}", exc_info=True)
        filtered = "[–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞]" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞—Ç—å
    reply_to_id = reply_to_message_id_override # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è /ask)
    if reply_to_id is None and update.message: # –ï—Å–ª–∏ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        reply_to_id = update.message.message_id if update.effective_chat.type != 'private' else None

    if filtered and not filtered.startswith("["):
        add_to_memory_history(history_key, ASSISTANT_ROLE, filtered) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥ ---
        await save_message_and_embed(history_key, ASSISTANT_ROLE, filtered)
        logger.debug(f"Sending response to chat {chat_id}")
        try:
             await context.bot.send_message(chat_id=chat_id, text=filtered, reply_to_message_id=reply_to_id)
        except Exception as e:
            logger.error(f"Failed to send message to {chat_id}: {e}")

    elif filtered.startswith("["): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ
         logger.warning(f"LLM issue for key {history_key}: {filtered}")
         reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ."
         if "blocked" in filtered.lower(): reply_text = "–ú–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
         elif "error" in filtered.lower() or "–æ—à–∏–±–∫–∞" in filtered.lower(): reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
         elif filtered == "[–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞]": reply_text = filtered # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ except –±–ª–æ–∫–∞
         try: await context.bot.send_message(chat_id=chat_id, text=reply_text, reply_to_message_id=reply_to_id)
         except Exception as e: logger.error(f"Failed to send error message to {chat_id}: {e}")

    else: # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        logger.warning(f"Empty filtered response for key {history_key}. Original Raw: {response[:100]}...")
        reply_text = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ—Ç–≤–µ—Ç–æ–º."
        try: await context.bot.send_message(chat_id=chat_id, text=reply_text, reply_to_message_id=reply_to_id)
        except Exception as e: logger.error(f"Failed to send empty response message to {chat_id}: {e}")

# --- –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –≥–æ–ª–æ—Å–∞, –≤–∏–¥–µ–æ ---
async def handle_text_voice_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or not update.message: return
    user_id = user.id

    if await asyncio.to_thread(is_user_banned, user_id):
        logger.warning(f"Ignoring message from banned user {user_id} in chat {chat.id}")
        return

    chat_id = chat.id; chat_type = chat.type
    prompt_text: Optional[str] = None; message_type = "unknown"; temp_file_path = None # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ–¥–∏–Ω –ø—É—Ç—å

    try: # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs(TEMP_MEDIA_DIR, exist_ok=True)
    except OSError as e:
        logger.error(f"Failed to create '{TEMP_MEDIA_DIR}': {e}")
        if update.message: await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    try: # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message.text:
            prompt_text = update.message.text
            message_type = "text"
            # --- –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–û–ù–ö–†–ï–¢–ù–´–ô –í–û–ü–†–û–° ---
            normalized_text = prompt_text.lower().strip().replace('?', '').replace('.', '').replace('!', '')
            creator_questions = [
                "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å", "–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª",
                "–∫—Ç–æ —Ç–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–∫—Ç–æ —Ç–µ–±—è –Ω–∞–ø–∏—Å–∞–ª"
            ]
            if normalized_text in creator_questions:
                logger.info(f"User {user_id} asked about the creator. Replying directly.")
                creator_username = escape_markdown_v2("@ByteBudda")
                reply_text = f"–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä {creator_username} üòä"
                await update.message.reply_text(reply_text, parse_mode='MarkdownV2')
                return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å
            # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

        elif update.message.voice:
             message_type = "voice"; voice = update.message.voice
             await context.bot.send_chat_action(chat_id, constants.ChatAction.RECORD_VOICE)
             vf = await voice.get_file()
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è WAV
             base = f"voice_{user_id}_{int(time.time())}"; p_oga = os.path.join(TEMP_MEDIA_DIR, f"{base}.oga"); temp_file_path = os.path.join(TEMP_MEDIA_DIR, f"{base}.wav")
             await vf.download_to_drive(p_oga); logger.debug(f"Voice downloaded: {p_oga}")
             try:
                 AudioSegment.from_file(p_oga).export(temp_file_path, format="wav"); logger.debug(f"Converted to {temp_file_path}")
                 os.remove(p_oga) # –£–¥–∞–ª—è–µ–º OGA –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
             except Exception as e:
                 logger.error(f"Voice conversion error: {e}", exc_info=True)
                 if os.path.exists(p_oga): os.remove(p_oga) # –£–¥–∞–ª—è–µ–º OGA –ø—Ä–∏ –æ—à–∏–±–∫–µ
                 await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
                 return
             prompt_text = await transcribe_voice(temp_file_path) # temp_file_path –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ transcribe_voice
             if not prompt_text or prompt_text.startswith("["):
                 logger.warning(f"Transcription failed: {prompt_text}")
                 await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {prompt_text or '–æ—à–∏–±–∫–∞'}")
                 return
             temp_file_path = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ transcribe_voice

        elif update.message.video_note:
             message_type = "video_note"; vn = update.message.video_note
             # ChatAction RECORD_VIDEO –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–æ–≤
             await context.bot.send_chat_action(chat_id, constants.ChatAction.RECORD_VIDEO)
             vnf = await vn.get_file()
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è WAV
             base = f"vnote_{user_id}_{int(time.time())}"; p_mp4 = os.path.join(TEMP_MEDIA_DIR, f"{base}.mp4"); temp_file_path = os.path.join(TEMP_MEDIA_DIR, f"{base}.wav")
             await vnf.download_to_drive(p_mp4); logger.debug(f"Video note downloaded: {p_mp4}")
             try:
                 AudioSegment.from_file(p_mp4).export(temp_file_path, format="wav"); logger.debug(f"Audio extracted to {temp_file_path}")
                 os.remove(p_mp4) # –£–¥–∞–ª—è–µ–º MP4 –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
             except Exception as e:
                 logger.error(f"Video note audio extraction error: {e}", exc_info=True)
                 if os.path.exists(p_mp4): os.remove(p_mp4) # –£–¥–∞–ª—è–µ–º MP4 –ø—Ä–∏ –æ—à–∏–±–∫–µ
                 await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è.")
                 return
             prompt_text = await transcribe_voice(temp_file_path) # temp_file_path –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ transcribe_voice
             if not prompt_text or prompt_text.startswith("["):
                 logger.warning(f"Transcription failed: {prompt_text}")
                 await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {prompt_text or '–æ—à–∏–±–∫–∞'}")
                 return
             temp_file_path = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ transcribe_voice

    except Exception as e:
        logger.error(f"Error processing {message_type}: {e}", exc_info=True)
        if update.message: await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ '{message_type}'.")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        if temp_file_path and os.path.exists(temp_file_path):
            try: os.remove(temp_file_path); logger.debug(f"Removed temp file on error: {temp_file_path}")
            except OSError: pass
        return

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
    if not prompt_text:
        logger.debug("No text content after processing message.")
        return

    # --- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –≤–∏–¥–µ–æ) ---
    await update_user_info(update) # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = await asyncio.to_thread(get_user_preferred_name_from_db, user_id) or user.first_name or f"User_{user_id}"
    history_key = chat_id if chat_type != 'private' else user_id
    display_user_name = user_name if chat_type != 'private' else None

    # --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–∫—Ç–æ–≤ ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π prompt_text (–±–µ–∑ –¥–æ–ø. –º–µ—Ç–æ–∫ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è) –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_hist_task = asyncio.to_thread(search_relevant_history_sync, history_key, prompt_text)
    search_facts_task = asyncio.to_thread(search_relevant_facts_sync, history_key, prompt_text)
    relevant_history_docs = await search_hist_task
    relevant_facts_docs = await search_facts_task
    # ----------------------------------------------------

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π prompt_text –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏
    add_to_memory_history(history_key, USER_ROLE, prompt_text, display_user_name)

    # --- –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É –î–õ–Ø –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ú–ü–¢–ê LLM ---
    prompt_input_text_for_llm = prompt_text
    if message_type == "voice": prompt_input_text_for_llm += " (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
    elif message_type == "video_note": prompt_input_text_for_llm += " (–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)"
    # -----------------------------------------------------------------

    # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
    if chat_type == 'private':
        logger.info(f"Processing {message_type} from {user_name} ({user_id}) in private.")
        style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
        sys_msg = f"{style} –¢—ã - {settings.BOT_NAME}. –ù–µ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."
        topic = await asyncio.to_thread(get_user_topic_from_db, user_id); topic_ctx = f"–¢–µ–º–∞: {topic}." if topic else ""
        history_deque = chat_history.get(history_key, deque(maxlen=settings.MAX_HISTORY))

        prompt_llm = prompt_builder.build_prompt(
            history_deque=history_deque, relevant_history=relevant_history_docs,
            relevant_facts=relevant_facts_docs, user_name=user_name,
            current_message_text=prompt_input_text_for_llm, # –¢–µ–∫—Å—Ç —Å –º–µ—Ç–∫–æ–π —Ç–∏–ø–∞ –¥–ª—è LLM
            system_message_base=sys_msg, topic_context=topic_ctx
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        # –ü–µ—Ä–µ–¥–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô prompt_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        asyncio.create_task(_process_generation_and_reply(update, context, history_key, prompt_llm, prompt_text))

    else: # –ì—Ä—É–ø–ø–∞
        should_reply = False
        activity_check_passed = should_process_message()

        if activity_check_passed:
            if bot_activity_percentage == 100: # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–∏ 100%
                should_reply = True
                logger.info(f"Processing group {message_type} from {user_name} ({user_id}). Reason: Activity 100%.")
            else: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ/–æ—Ç–≤–µ—Ç –ø—Ä–∏ < 100%
                try:
                    bot_info = await context.bot.get_me(); bot_id = bot_info.id; bot_uname = bot_info.username
                except Exception as e:
                    logger.error(f"Failed getting bot info: {e}"); bot_id = None; bot_uname = settings.BOT_NAME

                mentioned = (bot_uname and f"@{bot_uname}".lower() in prompt_input_text_for_llm.lower()) or \
                            settings.BOT_NAME.lower() in prompt_input_text_for_llm.lower()
                replied = update.message.reply_to_message and update.message.reply_to_message.from_user and update.message.reply_to_message.from_user.id == bot_id

                if mentioned or replied:
                    should_reply = True
                    logger.info(f"Processing group {message_type} from {user_name} ({user_id}). Reason: Mention={mentioned}, Reply={replied} (Activity {bot_activity_percentage}%)")
                else:
                    logger.info(f"Ignoring group {message_type} from {user_name} ({user_id}) (no mention/reply, Activity {bot_activity_percentage}% pass).")
        else: # –ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (< 100%)
            logger.debug(f"Skipping group msg from {user_id} due to activity check fail ({bot_activity_percentage}%).")

        if should_reply:
            style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
            sys_msg = f"{style} –¢—ã - {settings.BOT_NAME}. –û—Ç–≤–µ—á–∞–µ—à—å –≤ –≥—Ä—É–ø–ø–µ. –û–±—Ä–∞—â–∞–π—Å—è –∫ {user_name}. –ù–µ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."
            topic = await asyncio.to_thread(get_user_topic_from_db, user_id); topic_ctx = f"–¢–µ–º–∞ {user_name}: {topic}." if topic else ""
            history_deque = chat_history.get(history_key, deque(maxlen=settings.MAX_HISTORY))

            prompt_llm = prompt_builder.build_prompt(
                history_deque=history_deque, relevant_history=relevant_history_docs,
                relevant_facts=relevant_facts_docs, user_name=user_name,
                current_message_text=prompt_input_text_for_llm, # –¢–µ–∫—Å—Ç —Å –º–µ—Ç–∫–æ–π —Ç–∏–ø–∞ –¥–ª—è LLM
                system_message_base=sys_msg, topic_context=topic_ctx
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            # –ü–µ—Ä–µ–¥–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô prompt_text –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            asyncio.create_task(_process_generation_and_reply(update, context, history_key, prompt_llm, prompt_text))
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π prompt_text
            await save_message_and_embed(history_key, USER_ROLE, prompt_text, display_user_name)

    # --- –ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ Job –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) ---
    # asyncio.create_task(extract_and_save_facts(history_key))

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or not update.message or not update.message.document:
        logger.debug("Received document update without user/chat/message/document.")
        return
    user_id = user.id

    if await asyncio.to_thread(is_user_banned, user_id):
        logger.warning(f"Ignoring document from banned user {user_id} in chat {chat.id}")
        return

    doc = update.message.document
    file_name = doc.file_name or "unknown_document"
    mime_type = doc.mime_type or ""
    file_id = doc.file_id
    chat_id = chat.id
    chat_type = chat.type
    temp_file_path = None # –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

    logger.info(f"Received document '{file_name}' (type: {mime_type}) from user {user_id} in chat {chat_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏–ª–∏ MIME —Ç–∏–ø—É
    reader_func = None
    file_ext = os.path.splitext(file_name)[1].lower()

    if file_ext == '.pdf' or mime_type == 'application/pdf':
        reader_func = read_pdf
    elif file_ext == '.docx' or mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        reader_func = read_docx
    elif file_ext == '.txt' or mime_type.startswith('text/plain'):
        reader_func = read_txt
    elif file_ext == '.py' or mime_type in ['text/x-python', 'application/x-python-code']:
        reader_func = read_py
    else:
        logger.warning(f"Unsupported document type: {file_name} ({mime_type})")
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã —Ç–∏–ø–∞ '{file_ext}' ({mime_type}). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, DOCX, TXT, PY.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
    processing_msg = await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç '{escape_markdown_v2(file_name)}'\\. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É\\.\\.\\.", parse_mode='MarkdownV2')

    try:
        os.makedirs(TEMP_MEDIA_DIR, exist_ok=True)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        temp_file_name = f"doc_{user_id}_{file_id}{file_ext}"
        temp_file_path = os.path.join(TEMP_MEDIA_DIR, temp_file_name)

        logger.debug(f"Downloading document {file_id} to {temp_file_path}...")
        tg_file = await doc.get_file()
        await tg_file.download_to_drive(temp_file_path)
        logger.debug(f"Document {file_id} downloaded successfully.")

        logger.debug(f"Reading text from {temp_file_path} using {reader_func.__name__}...")
        prompt_text = await asyncio.to_thread(reader_func, temp_file_path)
        logger.debug(f"Text reading complete for {file_id}.")

    except Exception as e:
        logger.error(f"Error downloading or reading document {file_id} ('{file_name}'): {e}", exc_info=True)
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{escape_markdown_v2(file_name)}'\\.", parse_mode='MarkdownV2')
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if temp_file_path and os.path.exists(temp_file_path):
            try: os.remove(temp_file_path)
            except OSError: pass
        return
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è (–∏–ª–∏ –æ—à–∏–±–∫–∏)
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.remove(temp_file_path)
                logger.debug(f"Removed temporary document file: {temp_file_path}")
            except OSError as rm_err:
                logger.warning(f"Failed to remove temporary document file {temp_file_path}: {rm_err}")

    if prompt_text is None:
        logger.warning(f"Failed to extract text from document {file_id} ('{file_name}'). Reader returned None.")
        await processing_msg.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{escape_markdown_v2(file_name)}'\\.", parse_mode='MarkdownV2')
        return
    if not prompt_text.strip():
        logger.info(f"Document {file_id} ('{file_name}') contained no readable text.")
        await processing_msg.edit_text(f"‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç '{escape_markdown_v2(file_name)}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å\\.", parse_mode='MarkdownV2')
        return

    # --- –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ---
    logger.info(f"Successfully extracted text from '{file_name}' (length: {len(prompt_text)}).")

    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è LLM
    original_length = len(prompt_text)
    if original_length > MAX_DOCUMENT_TEXT_LENGTH:
        prompt_text_for_llm = prompt_text[:MAX_DOCUMENT_TEXT_LENGTH]
        logger.warning(f"Document text from '{file_name}' truncated from {original_length} to {MAX_DOCUMENT_TEXT_LENGTH} chars for LLM.")
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{escape_markdown_v2(file_name)}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π \\({original_length} —Å–∏–º–≤–æ–ª–æ–≤\\)\\. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å \\({MAX_DOCUMENT_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤\\)\\.", parse_mode='MarkdownV2')
    else:
        prompt_text_for_llm = prompt_text # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è LLM

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    try:
        await processing_msg.edit_text(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑ '{escape_markdown_v2(file_name)}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\\. –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å LLM\\.\\.\\.", parse_mode='MarkdownV2')
    except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å

    # --- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_text_voice_video) ---
    await update_user_info(update)
    user_name = await asyncio.to_thread(get_user_preferred_name_from_db, user_id) or user.first_name or f"User_{user_id}"
    history_key = chat_id if chat_type != 'private' else user_id
    display_user_name = user_name if chat_type != 'private' else None

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–∞–º—è—Ç–∏ –ü–û–õ–ù–´–ô —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    history_doc_text = f"(–¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_name})\n{prompt_text}"
    add_to_memory_history(history_key, USER_ROLE, history_doc_text, display_user_name)

    # –ü–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä–∞–º –¥–µ–ª–∞–µ–º –ø–æ –ù–ê–ß–ê–õ–£ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∏–ª–∏ –ø–æ —É—Ä–µ–∑–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É)
    search_hist_task = asyncio.to_thread(search_relevant_history_sync, history_key, prompt_text_for_llm)
    search_facts_task = asyncio.to_thread(search_relevant_facts_sync, history_key, prompt_text_for_llm)
    relevant_history_docs = await search_hist_task
    relevant_facts_docs = await search_facts_task

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
    style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
    sys_msg = f"{style} –¢—ã - {settings.BOT_NAME}. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{escape_markdown_v2(file_name)}'. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
    topic = await asyncio.to_thread(get_user_topic_from_db, user_id); topic_ctx = f"–¢–µ–º–∞: {topic}." if topic else ""
    history_deque = chat_history.get(history_key, deque(maxlen=settings.MAX_HISTORY))

    # –î–ª—è LLM –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
    llm_input_text = f"(–¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_name})\n{prompt_text_for_llm}"

    prompt_llm = prompt_builder.build_prompt(
        history_deque=history_deque, relevant_history=relevant_history_docs,
        relevant_facts=relevant_facts_docs, user_name=user_name,
        current_message_text=llm_input_text, # –£—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∫–æ–π –¥–ª—è LLM
        system_message_base=sys_msg, topic_context=topic_ctx
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    # –ü–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–ù–´–ô –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    # –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ
    asyncio.create_task(_process_generation_and_reply(
        update, context, history_key, prompt_llm,
        user_message_text=f"(–¢–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {file_name})\n{prompt_text}", # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î
        reply_to_message_id_override=processing_msg.message_id # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
        ))

    # --- –ó–∞–ø—É—Å–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤) ---
    # asyncio.create_task(extract_and_save_facts(history_key))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or not update.message or not update.message.photo: return
    user_id = user.id; chat_id = chat.id; chat_type = chat.type

    if await asyncio.to_thread(is_user_banned, user_id): logger.warning(f"Ignoring photo from banned user {user_id}"); return

    caption = update.message.caption or ""
    history_key = chat_id if chat_type != 'private' else user_id
    await update_user_info(update)
    user_name = await asyncio.to_thread(get_user_preferred_name_from_db, user_id) or user.first_name or f"User_{user_id}"
    display_user_name_photo = user_name if chat_type != 'private' else None
    history_message = "–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ" + (f" —Å –ø–æ–¥–ø–∏—Å—å—é: '{caption}'" if caption else "") # –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø–æ–∏—Å–∫–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø
    if chat_type != 'private' and not should_process_message():
        logger.debug(f"Photo from {user_id} skipped (activity {bot_activity_percentage}%). Saving info.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ –æ —Ñ–æ—Ç–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        await save_message_and_embed(history_key, USER_ROLE, history_message, display_user_name_photo)
        return

    logger.info(f"Processing photo from {user_name} in chat {chat_id}. Caption: '{caption[:50]}...'")
    await context.bot.send_chat_action(chat_id, constants.ChatAction.TYPING)

    # --- –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ---
    asyncio.create_task(_process_photo_reply(update, context))


async def _process_photo_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ."""
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ user, chat –∏ —Ç.–¥. —Å—é–¥–∞, —Ç.–∫. update –º–æ–∂–µ—Ç —É—Å—Ç–∞—Ä–µ—Ç—å
    user = update.effective_user; chat = update.effective_chat
    if not user or not chat or not update.message or not update.message.photo: return
    user_id = user.id; chat_id = chat.id; chat_type = chat.type
    history_key = chat_id if chat_type != 'private' else user_id
    caption = update.message.caption or ""
    user_name = await asyncio.to_thread(get_user_preferred_name_from_db, user_id) or user.first_name or f"User_{user_id}"
    display_user_name_photo = user_name if chat_type != 'private' else None
    history_message = "–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ" + (f" —Å –ø–æ–¥–ø–∏—Å—å—é: '{caption}'" if caption else "")
    reply_to_message_id = update.message.message_id if chat_type != 'private' else None

    try:
        photo_file = await update.message.photo[-1].get_file(); file_bytes = await photo_file.download_as_bytearray()
        if not file_bytes: raise ValueError("Downloaded photo bytes are empty.")
        image = Image.open(BytesIO(file_bytes)); image = image.convert('RGB')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –°–†–ê–ó–£
        add_to_memory_history(history_key, USER_ROLE, history_message, display_user_name_photo)
        await save_message_and_embed(history_key, USER_ROLE, history_message, display_user_name_photo)

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞) –∏–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        search_query_photo = caption if caption else "—Ñ–æ—Ç–æ"
        relevant_history_docs_photo = await asyncio.to_thread(search_relevant_history_sync, history_key, search_query_photo)
        relevant_facts_docs_photo = await asyncio.to_thread(search_relevant_facts_sync, history_key, search_query_photo)

        style = await _get_effective_style(chat_id, user_id, user_name, chat_type)
        sys_msg = f"{style} –¢—ã - {settings.BOT_NAME}. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        topic = await asyncio.to_thread(get_user_topic_from_db, user_id); topic_ctx = f"–¢–µ–º–∞: {topic}." if topic else ""
        history_deque = chat_history.get(history_key, deque(maxlen=settings.MAX_HISTORY))

        vision_prompt_text = prompt_builder.build_prompt(
            history_deque=history_deque, relevant_history=relevant_history_docs_photo,
            relevant_facts=relevant_facts_docs_photo, user_name=user_name,
            current_message_text=history_message, system_message_base=sys_msg,
            topic_context=topic_ctx
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Vision –º–æ–¥–µ–ª–∏
        vision_prompt_lines = vision_prompt_text.splitlines()
        if len(vision_prompt_lines) > 1:
             # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º ":", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
             if vision_prompt_lines[-1].strip().endswith(":"):
                 vision_prompt_core = "\n".join(vision_prompt_lines[:-1])
             else:
                 vision_prompt_core = "\n".join(vision_prompt_lines)
        else:
             vision_prompt_core = vision_prompt_text

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è Vision
        vision_instruction = "\n–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã."
        final_vision_prompt = vision_prompt_core + vision_instruction


        contents = [final_vision_prompt, image]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–µ–∑ –∫—ç—à–∞/–º–µ—Ç—Ä–∏–∫ –¥–ª—è Vision, —Ç.–∫. –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–µ
        response_text = await generate_vision_content_async(contents)
        filtered = filter_response(response_text)

        if filtered and not filtered.startswith("["):
            add_to_memory_history(history_key, ASSISTANT_ROLE, filtered)
            await save_message_and_embed(history_key, ASSISTANT_ROLE, filtered)
            await context.bot.send_message(chat_id, filtered, reply_to_message_id=reply_to_message_id)
        elif filtered.startswith("["):
            reply_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.";
            if "blocked" in filtered.lower(): reply_text = "–û—Ç–≤–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            await context.bot.send_message(chat_id, reply_text, reply_to_message_id=reply_to_message_id)
        else:
            reply_text = "–ù–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            await context.bot.send_message(chat_id, reply_text, reply_to_message_id=reply_to_message_id)
    except Exception as inner_e:
         logger.error(f"Error in _process_photo_reply for {user_id} in {chat_id}: {inner_e}", exc_info=True)
         # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
         try: await context.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.", reply_to_message_id=reply_to_message_id)
         except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏


# --- –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
# –û—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞/–≥–æ–ª–æ—Å–∞/–≤–∏–¥–µ–æ
handle_message = handle_text_voice_video
# handle_voice_message = handle_text_voice_video # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Ç.–∫. handle_message –ª–æ–≤–∏—Ç filter.VOICE
# handle_video_note_message = handle_text_voice_video # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Ç.–∫. handle_message –ª–æ–≤–∏—Ç filter.VIDEO_NOTE
# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –≤ main.py