from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import ContextTypes, CallbackContext, CommandHandler, CallbackQueryHandler, filters
import logging # logger –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ config
import os
from functools import wraps
from typing import Any, Dict # –î–ª—è type hints, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from config import BOT_NAME, DEFAULT_STYLE, SYSTEM_ROLE, USER_ROLE, ASSISTANT_ROLE, HISTORY_TTL, logger, ADMIN_USER_IDS, settings
from state import (add_to_history, user_preferred_name, # –£–±—Ä–∞–ª–∏ chat_history, last_activity
                   group_user_style_prompts, bot_activity_percentage, user_topic)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ vector_store
from vector_store import delete_history # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

user_info_db: Dict[int, Dict[str, Any]] = {}

# ==============================================================================
# –ù–∞—á–∞–ª–æ: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ bot_commands.py
# ==============================================================================

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ---
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update or not update.effective_user or update.effective_user.id not in ADMIN_USER_IDS:
            if update and update.message:
                await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            elif update and update.callback_query:
                 await update.callback_query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
            logger.warning(f"Unauthorized access attempt by user {update.effective_user.id if update.effective_user else 'Unknown'}")
            return
        return await func(update, context)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø - {settings.BOT_NAME}, –¥–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º?"
    )

async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (ChromaDB)."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat: return
    user_id = user.id

    history_key = chat.id if chat.type in ['group', 'supergroup'] else user.id

    if context.args:
        memory = " ".join(context.args).strip()
        if memory:
            user_info_db.setdefault(user_id, {"preferences": {}, "memory": None})
            user_info_db[user_id]['memory'] = memory
            await update.message.reply_text(f"–•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª–∞ —ç—Ç–æ –æ –≤–∞—Å: '{memory}'.")
            logger.info(f"User {user.id} updated memory: '{memory[:50]}...'")
        else:
             await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        current_memory = user_info_db.get(user_id, {}).get('memory')
        if current_memory:
             await update.message.reply_text(f"–Ø –ø–æ–º–Ω—é –æ –≤–∞—Å —Å–ª–µ–¥—É—é—â–µ–µ: '{current_memory}'.\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/remember –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç`.")
        else:
             await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /remember.")

async def clear_my_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data=f'clear_vector_history_{user_id}'),
          InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    )
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—ç—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)?", reply_markup=keyboard)

async def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if not query or not query.data: return
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
    data = query.data

    if data.startswith('clear_vector_history_'):
        user_id_str = data.split('_')[-1]
        if not user_id_str.isdigit():
             await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
             logger.error(f"Invalid user ID in callback data: {data}")
             return
        user_id_to_clear = int(user_id_str)

        if user_id_to_clear == query.from_user.id:
            history_key = user_id_to_clear # –î–ª—è –õ–° –∫–ª—é—á = user_id
            logger.info(f"User {query.from_user.id} confirmed clearing history for key {history_key}")
            # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ vector_store
            deleted = await delete_history(history_key)
            if deleted:
                 await query.edit_message_text("‚úÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.")
                 # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                 if history_key in user_topic:
                     del user_topic[history_key]
                     logger.info(f"Cleared topic for user {history_key}")
            else:
                 await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            await query.edit_message_text("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            logger.warning(f"User {query.from_user.id} tried to clear history for user {user_id_to_clear}")
    elif data == 'cancel':
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
         logger.warning(f"Received unknown callback data: {data}")
         await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


async def set_my_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if context.args:
        name = " ".join(context.args).strip()
        if 2 <= len(name) <= 50: # –î–æ–±–∞–≤–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–º–µ–Ω–∏
            user_preferred_name[user_id] = name
            # –û–±–Ω–æ–≤–∏–º user_info_db —Ç–æ–∂–µ, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
            if user_id in user_info_db:
                user_info_db[user_id]['preferred_name_set_by_user'] = name # –û—Ç–º–µ—Ç–∫–∞, —á—Ç–æ –∑–∞–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ '{name}'.")
            logger.info(f"User {user_id} set preferred name to '{name}'.")
        else:
            await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        current_name = user_preferred_name.get(user_id, update.effective_user.first_name)
        await update.message.reply_text(f"–°–µ–π—á–∞—Å —è –æ–±—Ä–∞—â–∞—é—Å—å –∫ –≤–∞–º –∫–∞–∫ '{current_name}'.\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–æ–≤–æ–µ –∏–º—è: `/setmyname –ù–æ–≤–æ–µ –ò–º—è`")


async def my_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    style_info = f"–ú–æ–π —Ç–µ–∫—É—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:\n{settings.DEFAULT_STYLE}\n\n(–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è)."
    await update.message.reply_text(style_info)

async def error_handler(update: object, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–∑ update, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    update_details = "N/A"
    if isinstance(update, Update) and update.effective_message:
        update_details = f"Update ID: {update.update_id}, Chat ID: {update.effective_chat.id}, User ID: {update.effective_user.id}"
    elif isinstance(update, dict): # –ò–Ω–æ–≥–¥–∞ update –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
         update_details = f"Update (dict): {str(update)[:200]}..."

    error_msg = f"Error: {type(context.error).__name__}: {context.error}\nUpdate details: {update_details}"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if ADMIN_USER_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            await context.bot.send_message(
                chat_id=ADMIN_USER_IDS[0],
                text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{error_msg[:3000]}" # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            logger.info(f"Error notification sent to admin {ADMIN_USER_IDS[0]}.")
        except Exception as e:
            logger.error(f"Failed to send error notification to admin: {e}")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–∫–∞—Ö
    # if isinstance(update, Update) and update.effective_message:
    #     try:
    #         await update.effective_message.reply_text("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    #     except Exception:
    #         logger.error("Failed to send error message to user.")


# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

@admin_only
async def set_group_user_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)."""
    if not update.message.reply_to_message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å.")
        return
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    target_user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    style_prompt = " ".join(context.args).strip()

    if not style_prompt:
         await update.message.reply_text("–°—Ç–∏–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
         return

    key = (chat_id, target_user.id)
    group_user_style_prompts[key] = style_prompt
    await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.first_name} ({target_user.id}) –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    logger.info(f"Admin {update.effective_user.id} set group user style for user {target_user.id} in chat {chat_id}.")

@admin_only
async def reset_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª—å –∏–∑ .env —Å–Ω–æ–≤–∞
    original_default_style = os.getenv('DEFAULT_STYLE', "–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.")
    settings.update_default_style(original_default_style)
    await update.message.reply_text(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–∏–∑ .env):\n{settings.DEFAULT_STYLE}")
    logger.info(f"Admin {update.effective_user.id} reset global style to default.")


@admin_only
async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏—é) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user ID."""
    if context.args:
        user_id_str = context.args[0]
        if not user_id_str.isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")
            return

        user_id_to_clear = int(user_id_str)
        # –í –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –º—ã –æ–±—ã—á–Ω–æ —á–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history_key = user_id_to_clear
        logger.info(f"Admin {update.effective_user.id} requested clearing history for key {history_key}")

        deleted = await delete_history(history_key)
        if deleted:
            await update.message.reply_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_clear} –æ—á–∏—â–µ–Ω–∞.")
            if history_key in user_topic: del user_topic[history_key]
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {user_id_to_clear} (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ) –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/clear_history`.")


@admin_only
async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    if ADMIN_USER_IDS:
        admin_list = ", ".join(map(str, ADMIN_USER_IDS))
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞: {admin_list}")
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç (–Ω–µ –∑–∞–¥–∞–Ω –≤ .env).")

@admin_only
async def get_log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    log_filename = "bot.log" # –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–≥–µ—Ä–∞
    try:
        if os.path.exists(log_filename) and os.path.getsize(log_filename) > 0:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(log_filename),
                caption=f"–§–∞–π–ª –ª–æ–≥–æ–≤ {log_filename}"
            )
            logger.info(f"Log file sent to admin {update.effective_user.id}.")
        else:
            await update.message.reply_text(f"–§–∞–π–ª –ª–æ–≥–æ–≤ '{log_filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")
        logger.error(f"Error sending log file: {e}", exc_info=True)

@admin_only
async def ban_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ "—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –±–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    logger.warning("Ban command called but not implemented.")


@admin_only
async def set_default_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    if context.args:
        new_style = " ".join(context.args).strip()
        if new_style:
            settings.update_default_style(new_style)
            await update.message.reply_text(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{settings.DEFAULT_STYLE}")
            logger.info(f"Admin {update.effective_user.id} set new global style.")
        else:
            await update.message.reply_text("–°—Ç–∏–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    else:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:\n{settings.DEFAULT_STYLE}\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ `/setdefaultstyle –ù–æ–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è`")


@admin_only
async def set_bot_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞."""
    if context.args:
        new_name = " ".join(context.args).strip()
        if 1 <= len(new_name) <= 50:
            settings.update_bot_name(new_name)
            await update.message.reply_text(f"‚úÖ –ò–º—è –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {settings.BOT_NAME}")
            logger.info(f"Admin {update.effective_user.id} set bot name to '{settings.BOT_NAME}'.")
        else:
            await update.message.reply_text("–ò–º—è –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –∏–º—è –±–æ—Ç–∞: {settings.BOT_NAME}\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ `/setbotname –ù–æ–≤–æ–µ–ò–º—è`")

@admin_only
async def set_activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö."""
    global bot_activity_percentage # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ state
    if context.args:
        try:
            percentage = int(context.args[0])
            if 0 <= percentage <= 100:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ state
                bot_activity_percentage = percentage
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª knowledge (state.py —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
                await update.message.reply_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {percentage}%")
                logger.info(f"Bot activity set to {percentage}% by admin {update.effective_user.id}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (0-100).")
    else:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö: {bot_activity_percentage}%\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ `/setactivity <—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100>`")


async def reset_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ ChromaDB)."""
    user = update.effective_user
    chat = update.effective_chat
    if not user or not chat: return

    chat_type = chat.type
    history_key = chat.id if chat_type in ['group', 'supergroup'] else user.id
    logger.info(f"User {user.id} requested context reset for key {history_key}")

    deleted = await delete_history(history_key)
    if deleted:
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω (–∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞). –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
        if history_key in user_topic: del user_topic[history_key]
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if chat_type != 'private':
            keys_to_del = [k for k in group_user_style_prompts if k[0] == history_key]
            deleted_styles_count = 0
            for k in keys_to_del:
                try:
                    del group_user_style_prompts[k]
                    deleted_styles_count += 1
                except KeyError: pass
            if deleted_styles_count > 0:
                 logger.info(f"Cleared {deleted_styles_count} group user styles for chat_id {history_key} during context reset.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).")


# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    user = update.effective_user
    is_admin = user.id in ADMIN_USER_IDS

    user_commands_text = """
*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/setmyname <–∏–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ –∏–º—è –¥–ª—è –æ–±—â–µ–Ω–∏—è
/remember <—Ç–µ–∫—Å—Ç> - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/reset_context - –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é)
/clear_my_history - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–∑–∞–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
"""

    admin_commands_text = """
*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/set_default_style <—Å—Ç–∏–ª—å> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
/reset_style - –°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–∏–∑ .env)
/set_bot_name <–∏–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞
/set_activity <0-100> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
/set_group_user_style [–≤ –æ—Ç–≤–µ—Ç] <—Å—Ç–∏–ª—å> - –ó–∞–¥–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
/clear_history <user_id> - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –õ–° —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_admins - –ü–æ–∫–∞–∑–∞—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/get_log - –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤
/ban [–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

    help_text = user_commands_text
    if is_admin:
        help_text += admin_commands_text

    await update.message.reply_text(help_text, parse_mode='Markdown')

# ==============================================================================
# –ö–æ–Ω–µ—Ü: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ bot_commands.py
# ==============================================================================
