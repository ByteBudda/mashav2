# -*- coding: utf-8 -*-
# bot_commands.py
# ... (other imports and functions remain the same) ...
import asyncio
import json
import re # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º re –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile, constants
from telegram.ext import ContextTypes, CallbackContext, CommandHandler, CallbackQueryHandler, filters
import logging
import os
from functools import wraps
from typing import Any, Optional, List, Dict # –î–æ–±–∞–≤–∏–ª–∏ Dict
from collections import deque
import time
import sqlite3 # –î–ª—è get_banned_users type hint

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config
from config import logger, ADMIN_USER_IDS, settings, SYSTEM_ROLE, USER_ROLE, ASSISTANT_ROLE

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º/–ë–î
from state import (
    add_to_memory_history, chat_history, last_activity, # In-memory state
    set_user_preferred_name_in_db, get_user_info_from_db, # User DB functions
    bot_activity_percentage, save_bot_settings_to_db, # Bot state/settings
    get_db_connection, _execute_db, # DB helpers
    set_group_user_style_in_db, delete_group_user_style_in_db, # User-group style DB
    set_group_style_in_db, delete_group_style_in_db, # Group style DB
    ban_user_in_db, unban_user_in_db, is_user_banned, get_banned_users # Ban DB functions
)
# –ò–º–ø–æ—Ä—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
from vector_db import (
    delete_embeddings_by_sqlite_ids_sync,
    delete_facts_by_history_key_sync,
    delete_fact_embeddings_by_ids_sync # –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
)
# --- –ò–º–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –∏ –∫—ç—à–∞ ---
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ utils.py –∏–ª–∏ –≥–¥–µ-—Ç–æ –µ—â–µ
try:
    from utils import metrics, cache # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
except ImportError:
    logger.warning("Could not import metrics or cache from utils. Stats/Cache commands might fail.")
    # –û–ø—Ä–µ–¥–µ–ª–∏–º –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø–∞–¥–∞–ª–∏ —Å NameError
    class DummyMetrics:
        def get_stats(self): return {'average_times': {}, 'error_counts': {}}
    class DummyCache:
        cache = {}; hits = 0; misses = 0
        def clear(self): pass
    metrics = DummyMetrics()
    cache = DummyCache()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2."""
    if not isinstance(text, str): text = str(text) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫—É
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ò–ú–ï–ù–ù–û —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–µ–¥–≤–∞—Ä—è—è –∏—Ö '\'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.escape, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã regex –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ []
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ---
# ... (admin_only decorator remains the same) ...
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –±–æ—Ç–∞."""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        if not user or user.id not in ADMIN_USER_IDS:
            msg = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤\\."
            try: # –î–æ–±–∞–≤–∏–º try-except –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if update.message: await update.message.reply_text(msg, parse_mode='MarkdownV2')
                elif update.callback_query: await update.callback_query.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
            except Exception as e:
                logger.error(f"Failed to send 'no rights' message: {e}")
            logger.warning(f"Unauthorized admin command attempt by user {user.id if user else 'Unknown'}")
            return None
        return await func(update, context, *args, **kwargs)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
# ... (start_command, remember_command, etc. remain the same until help_command) ...

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user; msg = update.message
    if not user or not msg: return
    uname = escape_markdown_v2(user.first_name or f"User_{user.id}")
    bname = escape_markdown_v2(settings.BOT_NAME)
    await msg.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {uname}\\! –Ø *{bname}*\\. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", parse_mode='MarkdownV2')
    logger.info(f"User {user.id} started the bot.")


async def remember_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remember <—Ç–µ–∫—Å—Ç>."""
    user = update.effective_user; chat = update.effective_chat; msg = update.message
    if not user or not chat or not msg: return
    history_key = chat.id if chat.type != 'private' else user.id

    if context.args:
        memory = " ".join(context.args).strip()
        if memory:
            sys_msg = f"–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {memory}"
            add_to_memory_history(history_key, SYSTEM_ROLE, sys_msg)
            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await msg.reply_text(f"üìù –ó–∞–ø–æ–º–Ω–∏–ª–∞: '{escape_markdown_v2(memory)}'\\.", parse_mode='MarkdownV2')
            logger.info(f"User {user.id} added memory for key {history_key}: '{memory[:50]}...'")
        else: await msg.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\\.", parse_mode='MarkdownV2')
    else: await msg.reply_text("–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å\\?", parse_mode='MarkdownV2')


async def clear_my_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –µ–≥–æ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
    user = update.effective_user; msg = update.message
    if not user or not msg: return
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data=f'confirm_clear_my_history_{user.id}'),
                                      InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_clear')]])
    await msg.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏\\?\n–≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\.", reply_markup=keyboard, parse_mode='MarkdownV2')


async def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏)."""
    query = update.callback_query
    if not query or not query.from_user: return
    await query.answer() # Answer immediately to avoid timeout appearance
    data = query.data; user_id = query.from_user.id

    if data.startswith('confirm_clear_my_history_'):
        target_user_id = int(data.split('_')[-1])
        if user_id == target_user_id:
            history_key = user_id # –õ–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
            history_cleared = False; db_cleared = None; deleted_sqlite_ids = []

            # Clear memory
            if history_key in chat_history:
                del chat_history[history_key]
                history_cleared = True
            if history_key in last_activity:
                del last_activity[history_key]

            # Clear DB
            conn = None
            try:
                conn = get_db_connection(); cursor = conn.cursor()
                cursor.execute("SELECT id FROM history WHERE history_key = ?", (history_key,))
                deleted_sqlite_ids = [row['id'] for row in cursor.fetchall()]
                if deleted_sqlite_ids:
                    # Use parameter substitution for safety
                    placeholders = ','.join('?' * len(deleted_sqlite_ids))
                    cursor.execute(f"DELETE FROM history WHERE id IN ({placeholders})", tuple(deleted_sqlite_ids))
                    db_cleared = cursor.rowcount
                    conn.commit()
                else:
                    db_cleared = 0 # No rows deleted
            except sqlite3.Error as e:
                logger.error(f"Error clearing SQLite history for {history_key}: {e}", exc_info=True)
                db_cleared = None
                if conn:
                    try: conn.rollback()
                    except Exception: pass # Ignore rollback error if connection closed
            finally:
                if conn: conn.close()

            if db_cleared is None:
                try: await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\.")
                except Exception as edit_e: logger.error(f"Failed editing msg after DB error: {edit_e}")
                return

            # Clear Vector DB embeddings
            if deleted_sqlite_ids:
                logger.info(f"Deleting {len(deleted_sqlite_ids)} history embeddings from ChromaDB for key {history_key}...")
                await asyncio.to_thread(delete_embeddings_by_sqlite_ids_sync, history_key, deleted_sqlite_ids)
                 # Also delete related facts
                logger.info(f"Deleting facts for key {history_key}...")
                await asyncio.to_thread(delete_facts_by_history_key_sync, history_key)

            # Send confirmation
            if history_cleared or db_cleared > 0:
                logger.info(f"User {user_id} cleared history (mem: {history_cleared}, db: {db_cleared} rows).")
                try: await query.edit_message_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞\\.")
                except Exception as edit_e: logger.error(f"Failed editing success msg: {edit_e}")
            else:
                try: await query.edit_message_text("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø—É—Å—Ç–∞\\.")
                except Exception as edit_e: logger.error(f"Failed editing empty msg: {edit_e}")
        else:
            try: await query.edit_message_text("üö´ –ù–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å —á—É–∂—É—é –∏—Å—Ç–æ—Ä–∏—é\\.")
            except Exception as edit_e: logger.error(f"Failed editing wrong user msg: {edit_e}")
            logger.warning(f"User {user_id} tried clearing history for {target_user_id}.")

    elif data == 'cancel_clear':
        try: await query.edit_message_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\.")
        except Exception as edit_e: logger.error(f"Failed editing cancel msg: {edit_e}")


async def set_my_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user; msg = update.message
    if not user or not msg: return
    if context.args:
        name = " ".join(context.args).strip()
        if name: await asyncio.to_thread(set_user_preferred_name_in_db, user.id, name); await msg.reply_text(f"–•–æ—Ä–æ—à–æ, {escape_markdown_v2(name)}\\!", parse_mode='MarkdownV2')
        else: await msg.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\\.", parse_mode='MarkdownV2')
    else: await msg.reply_text("–ö–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å\\?", parse_mode='MarkdownV2')


async def reset_context_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å—Ç–æ—Ä–∏—é –≤ –ø–∞–º—è—Ç–∏) —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    user = update.effective_user; chat = update.effective_chat; msg = update.message
    if not user or not chat or not msg: return
    history_key = chat.id if chat.type != 'private' else user.id

    if history_key in chat_history:
        chat_history[history_key].clear(); logger.info(f"User {user.id} reset context for key {history_key}.")
        await msg.reply_text("–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\\!", parse_mode='MarkdownV2')
    else: await msg.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç–∞–∫ –ø—É—Å—Ç\\.", parse_mode='MarkdownV2')


# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2."""
    user = update.effective_user; msg = update.message
    if not user or not msg: return
    uname = escape_markdown_v2(user.first_name or f"User_{user.id}")
    bname = escape_markdown_v2(settings.BOT_NAME)

    parts = [f"–ü—Ä–∏–≤–µ—Ç, {uname}\\! –Ø *{bname}*\\. –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã:\n", "*–û—Å–Ω–æ–≤–Ω—ã–µ:*"]
    user_cmds = { "/start": "–ù–∞—á–∞—Ç—å", "/help": "–ü–æ–º–æ—â—å", "/remember <—Ç–µ–∫—Å—Ç>": "–ó–∞–ø–æ–º–Ω–∏—Ç—å",
                  "/clear_my_history": "–û—á–∏—Å—Ç–∏—Ç—å –º–æ—é –∏—Å—Ç–æ—Ä–∏—é", "/setmyname <–∏–º—è>": "–ú–æ–µ –∏–º—è", "/reset_context": "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥" }
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    for cmd, desc in user_cmds.items():
        # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º cmd, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
        desc_escaped = escape_markdown_v2(desc)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: /command \- —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\.
        line = f"{cmd} \\- {desc_escaped}\\."
        parts.append(line)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    if user.id in ADMIN_USER_IDS:
        parts.append("\n*–ê–¥–º–∏–Ω—Å–∫–∏–µ:*")
        admin_cmds = {
            "/clear_history <ID>": "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (–ø–∞–º—è—Ç—å, –ë–î, –≤–µ–∫—Ç–æ—Ä—ã)",
            "/set_default_style <—Å—Ç–∏–ª—å>": "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)",
            "/reset_style": "–°–±—Ä–æ—Å —Å—Ç–∏–ª—è (–∫ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ .env)",
            "/set_bot_name <–∏–º—è>": "–ò–º—è –±–æ—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î)",
            "/set_activity <%>": "% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)",
            "/set_group_style <—Å—Ç–∏–ª—å>": "–°—Ç–∏–ª—å –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã (–ë–î)",
            "/reset_group_style": "–°–±—Ä–æ—Å —Å—Ç–∏–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã (–ë–î)",
            "/set_group_user_style <—Å—Ç–∏–ª—å>": "–°—Ç–∏–ª—å –¥–ª—è —é–∑–µ—Ä–∞ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ë–î)", # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∏–ª—å –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
            "/reset_group_user_style": "–°–±—Ä–æ—Å —Å—Ç–∏–ª—è —é–∑–µ—Ä–∞ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ë–î)",
            "/ban <ID/–æ—Ç–≤–µ—Ç> [–ø—Ä–∏—á–∏–Ω–∞]": "–ó–∞–±–∞–Ω–∏—Ç—å (–ë–î –∏ —á–∞—Ç)",
            "/unban <ID>": "–†–∞–∑–±–∞–Ω–∏—Ç—å (–ë–î –∏ —á–∞—Ç)",
            "/list_banned": "–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –∏–∑ –ë–î",
            "/list_admins": "–°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env",
            "/get_log": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª bot.log",
            "/get_gen_params": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini",
            "/set_gen_params <p>=<v>": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Gemini (–ë–î)",
            "/list_providers": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
            "/switch_provider <–∏–º—è>": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
            "/provider_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–≤—Ä–µ–º—è, –æ—à–∏–±–∫–∏)",
            "/clear_cache": "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤ LLM",
            "/cache_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤ LLM"
        }
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        for cmd, desc in admin_cmds.items():
            # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º cmd
            desc_escaped = escape_markdown_v2(desc)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: /command \- —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\.
            # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ <—Å—Ç–∏–ª—å> –≤ /set_group_user_style - –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã
            if cmd == "/set_group_user_style <—Å—Ç–∏–ª—å>":
                 command_part = "/set_group_user_style" # –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                 line = f"{command_part} `<—Å—Ç–∏–ª—å>` \\- {desc_escaped}\\." # –ê—Ä–≥—É–º–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–¥
            elif cmd == "/switch_provider <–∏–º—è>":
                 command_part = "/switch_provider"
                 line = f"{command_part} `<–∏–º—è>` \\- {desc_escaped}\\."
            # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å <–∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏>, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç
            else:
                 line = f"{cmd} \\- {desc_escaped}\\."
            parts.append(line)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    final_text = "\n".join(parts)
    try: await msg.reply_text(final_text, parse_mode='MarkdownV2')
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    except Exception as e:
        logger.error(f"Failed sending help MDv2: {e}. Text was:\n{final_text}\nSending plain.")
        plain = final_text
        for char in r'_*[]()~`>#+-=|{}.!':
            plain = plain.replace(f'\\{char}', char)
        plain = plain.replace('*', '').replace('`', '')
        try: await msg.reply_text(plain)
        except Exception as fallback_e: logger.error(f"Failed sending plain help: {fallback_e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
# ... (error_handler remains the same) ...
async def error_handler(update: object, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É."""
    logger.error(f"Exception while handling update: {context.error}", exc_info=context.error)
    chat_id, user_id, update_type = "N/A", "N/A", type(update).__name__
    if isinstance(update, Update):
        if update.effective_chat: chat_id = update.effective_chat.id
        if update.effective_user: user_id = update.effective_user.id
    err = context.error
    # Safely convert error to string before escaping
    err_msg_raw = str(err) if err else "Unknown error"
    err_type = escape_markdown_v2(type(err).__name__)
    err_msg = escape_markdown_v2(err_msg_raw)

    full_msg = f"‚ö†Ô∏è *–û—à–∏–±–∫–∞*\n*–¢–∏–ø:* `{err_type}`\n*–û—à–∏–±–∫–∞:* `{err_msg}`\n*Update:* `{update_type}`\n*Chat:* `{chat_id}`\n*User:* `{user_id}`"
    if ADMIN_USER_IDS:
        try:
            # Truncate message if too long
            await context.bot.send_message(ADMIN_USER_IDS[0], full_msg[:4090], parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"Failed sending error notification: {e}")
            # Try sending plain text if Markdown fails
            try:
                plain_msg = full_msg.replace('*', '').replace('`', '').replace('\\', '') # Basic unescaping
                await context.bot.send_message(ADMIN_USER_IDS[0], plain_msg[:4090])
            except Exception as plain_e:
                 logger.error(f"Failed sending plain error notification: {plain_e}")


# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @admin_only) ---
# ... (set_group_user_style_command, reset_group_user_style_command, etc. remain the same until list_banned_command) ...

@admin_only
async def set_group_user_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.reply_to_message: await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/set_group_user_style <—Å—Ç–∏–ª—å>`"); return
    if not context.args: await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å\\."); return
    target = msg.reply_to_message.from_user; style = " ".join(context.args).strip()
    if not target or not style: await msg.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö/—Å—Ç–∏–ª—è\\."); return
    success = await asyncio.to_thread(set_group_user_style_in_db, msg.chat_id, target.id, style)
    if success: await msg.reply_text(f"‚úÖ –°—Ç–∏–ª—å –¥–ª—è {target.mention_markdown_v2()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\.", parse_mode='MarkdownV2'); logger.info(f"Admin {msg.from_user.id} set style for {target.id} in {msg.chat_id}.")
    else: await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª—è \\(–ë–î\\)\\.", parse_mode='MarkdownV2')

@admin_only
async def reset_group_user_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.reply_to_message: await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/reset_group_user_style`"); return
    target = msg.reply_to_message.from_user
    if not target: await msg.reply_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö\\."); return
    success = await asyncio.to_thread(delete_group_user_style_in_db, msg.chat_id, target.id)
    if success: await msg.reply_text(f"‚úÖ –°—Ç–∏–ª—å –¥–ª—è {target.mention_markdown_v2()} —Å–±—Ä–æ—à–µ–Ω\\.", parse_mode='MarkdownV2'); logger.info(f"Admin {msg.from_user.id} reset style for {target.id} in {msg.chat_id}.")
    else: await msg.reply_text("‚ùå –°—Ç–∏–ª—å –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î\\.", parse_mode='MarkdownV2')

@admin_only
async def set_group_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg=update.message; chat = update.effective_chat;
    if not msg or not chat or chat.type == 'private': await msg.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø\\."); return
    if not context.args: await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å: `/set_group_style <—Å—Ç–∏–ª—å>`"); return
    style = " ".join(context.args).strip()
    if not style: await msg.reply_text("–°—Ç–∏–ª—å –Ω–µ –ø—É—Å—Ç–æ–π\\."); return
    success = await asyncio.to_thread(set_group_style_in_db, chat.id, style)
    if success: await msg.reply_text(f"‚úÖ –°—Ç–∏–ª—å –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\."); logger.info(f"Admin {msg.from_user.id} set style for group {chat.id}.")
    else: await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª—è \\(–ë–î\\)\\.")

@admin_only
async def reset_group_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg=update.message; chat = update.effective_chat;
    if not msg or not chat or chat.type == 'private': await msg.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø\\."); return
    success = await asyncio.to_thread(delete_group_style_in_db, chat.id)
    if success: await msg.reply_text(f"‚úÖ –°—Ç–∏–ª—å –≥—Ä—É–ø–ø—ã —Å–±—Ä–æ—à–µ–Ω\\."); logger.info(f"Admin {msg.from_user.id} reset style for group {chat.id}.")
    else: await msg.reply_text("‚ùå –°—Ç–∏–ª—å –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î\\.")

@admin_only
async def reset_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg=update.message; user = update.effective_user
    if not msg or not user: return
    # Reset only in memory, don't save to DB
    initial_style = settings._initial_default_style
    settings.update_default_style(initial_style)
    # Removed saving to DB: await asyncio.to_thread(save_bot_settings_to_db, settings.get_settings_dict(), bot_activity_percentage)
    escaped = escape_markdown_v2(initial_style)
    await msg.reply_text(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å–±—Ä–æ—à–µ–Ω \\(–¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config/env\\) –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏:\n```\n{escaped}\n```", parse_mode='MarkdownV2'); logger.info(f"Admin {user.id} reset global style in memory.")


@admin_only
async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user
    if not msg or not user: return
    if not context.args: await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `/clear_history <ID>`"); return
    try: history_key = int(context.args[0])
    except (ValueError, IndexError): await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID\\."); return

    history_cleared = False; db_cleared = None; deleted_sqlite_ids = []

    # Clear memory
    if history_key in chat_history:
        del chat_history[history_key]
        history_cleared = True
    if history_key in last_activity:
        del last_activity[history_key]

    # Clear DB
    conn = None
    try:
        conn = get_db_connection(); cursor = conn.cursor()
        # Find IDs first
        cursor.execute("SELECT id FROM history WHERE history_key = ?", (history_key,))
        deleted_sqlite_ids = [row['id'] for row in cursor.fetchall()]
        if deleted_sqlite_ids:
            placeholders = ','.join('?' * len(deleted_sqlite_ids))
            cursor.execute(f"DELETE FROM history WHERE id IN ({placeholders})", tuple(deleted_sqlite_ids))
            db_cleared = cursor.rowcount
            conn.commit()
        else:
            db_cleared = 0
    except sqlite3.Error as e:
        logger.error(f"Error clearing SQLite history for key {history_key}: {e}", exc_info=True)
        db_cleared = None
        if conn:
            try: conn.rollback()
            except Exception: pass
    finally:
        if conn: conn.close()

    if db_cleared is None:
        await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\."); return

    # Clear Vector DB embeddings if DB rows were deleted
    if deleted_sqlite_ids:
        logger.info(f"Deleting {len(deleted_sqlite_ids)} history embeddings for {history_key}...")
        await asyncio.to_thread(delete_embeddings_by_sqlite_ids_sync, history_key, deleted_sqlite_ids)
        # Also delete related facts
        logger.info(f"Deleting facts for key {history_key}...")
        await asyncio.to_thread(delete_facts_by_history_key_sync, history_key)

    hk_escaped = escape_markdown_v2(str(history_key))
    if history_cleared or db_cleared > 0:
        await msg.reply_text(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è `{hk_escaped}` –æ—á–∏—â–µ–Ω–∞ \\(–ø–∞–º—è—Ç—å: {history_cleared}, –ë–î: {db_cleared} rows, –≤–µ–∫—Ç–æ—Ä—ã —É–¥–∞–ª–µ–Ω—ã\\)\\.", parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} cleared history for {history_key} (mem: {history_cleared}, db: {db_cleared}).")
    else:
        await msg.reply_text(f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è `{hk_escaped}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –ë–î\\.", parse_mode='MarkdownV2')


@admin_only
async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message;
    if not msg: return
    if ADMIN_USER_IDS:
        admin_list = "\n".join(f"\\- `{aid}`" for aid in ADMIN_USER_IDS)
        await msg.reply_text(f"üîë *–ê–¥–º–∏–Ω—ã:*\n{admin_list}", parse_mode='MarkdownV2')
    else:
        await msg.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç \\(–Ω–µ –∑–∞–¥–∞–Ω –≤ `.env`\\)\\.", parse_mode='MarkdownV2')

@admin_only
async def get_log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user; chat = update.effective_chat
    if not msg or not user or not chat: return
    log_file = 'bot.log' # Assumes RotatingFileHandler is named this
    if os.path.exists(log_file) and os.path.getsize(log_file) > 0:
        try:
             # Escape dots in the message
             await msg.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –ª–æ–≥–æ–≤\\.\\.\\.", parse_mode='MarkdownV2')
             # Send file with simple caption
             await context.bot.send_document(chat.id, InputFile(log_file), caption="bot.log")
             logger.info(f"Admin {user.id} requested log file.")
        except constants.NetworkError as e:
            logger.error(f"Net error sending log: {e}")
            await msg.reply_text(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: `{escape_markdown_v2(str(e))}`", parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"Failed sending log: {e}", exc_info=True)
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: `{escape_markdown_v2(str(e))}`", parse_mode='MarkdownV2')
    elif os.path.exists(log_file):
        await msg.reply_text("–§–∞–π–ª `bot.log` –ø—É—Å—Ç\\.", parse_mode='MarkdownV2')
    else:
        await msg.reply_text("–§–∞–π–ª `bot.log` –Ω–µ –Ω–∞–π–¥–µ–Ω\\.", parse_mode='MarkdownV2')

@admin_only
async def ban_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user; chat = update.effective_chat
    if not msg or not user or not chat: return
    reason = " ".join(context.args[1:]) if len(context.args) > 1 else None
    target_id = None
    target_info = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é" # Default display name

    if msg.reply_to_message:
        target_user = msg.reply_to_message.from_user
        if not target_user:
            await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞\\."); return
        target_id = target_user.id
        target_info = target_user.mention_markdown_v2() # Use mention if available
    elif context.args:
        try:
            target_id = int(context.args[0])
            target_info = f"ID `{target_id}`" # Use ID if no reply
        except (ValueError, IndexError):
            await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban <ID> [–ø—Ä–∏—á–∏–Ω–∞]`"); return
    else:
        await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: `/ban <ID> [–ø—Ä–∏—á–∏–Ω–∞]`"); return

    if target_id == user.id:
        await msg.reply_text("–°–µ–±—è –∑–∞–±–∞–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è\\."); return
    if target_id in ADMIN_USER_IDS:
        await msg.reply_text("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\\."); return

    if await asyncio.to_thread(is_user_banned, target_id):
        await msg.reply_text(f"{target_info} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω\\.", parse_mode='MarkdownV2'); return

    success = await asyncio.to_thread(ban_user_in_db, target_id, reason)
    if success:
        reason_text = f" –ü—Ä–∏—á–∏–Ω–∞: _{escape_markdown_v2(reason)}_" if reason else ""
        reply_msg = f"‚úÖ {target_info} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.{reason_text}"
        await msg.reply_text(reply_msg, parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} banned {target_id} in DB. Reason: {reason}")

        # Try banning in the current chat if it's a group
        if chat.type != 'private':
            try:
                await context.bot.ban_chat_member(chat.id, target_id)
                await msg.reply_text(f"‚úÖ –¢–∞–∫–∂–µ –∑–∞–±–∞–Ω–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ `{escape_markdown_v2(str(chat.id))}`\\.", parse_mode='MarkdownV2')
                logger.info(f"Banned {target_id} in chat {chat.id}")
            except Exception as e:
                logger.warning(f"Could not ban {target_id} in chat {chat.id} (maybe no rights or user not present): {e}")
                await msg.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ \\(–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á–∞—Ç–µ\\)\\.", parse_mode='MarkdownV2')
    else:
        await msg.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å {target_info} \\(–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\)\\.", parse_mode='MarkdownV2')

@admin_only
async def unban_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user; chat = update.effective_chat
    if not msg or not user or not chat: return
    if not context.args:
        await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞: `/unban <ID>`"); return
    try:
        target_id = int(context.args[0])
        target_info = f"ID `{target_id}`"
    except (ValueError, IndexError):
        await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\."); return

    if not await asyncio.to_thread(is_user_banned, target_id):
        await msg.reply_text(f"{target_info} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –ë–î\\.", parse_mode='MarkdownV2'); return

    success = await asyncio.to_thread(unban_user_in_db, target_id)
    if success:
        await msg.reply_text(f"‚úÖ {target_info} —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\.", parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} unbanned {target_id} in DB.")

        # Try unbanning in the current chat if it's a group
        if chat.type != 'private':
            try:
                # only_if_banned=True prevents errors if user wasn't banned in this specific chat
                await context.bot.unban_chat_member(chat.id, target_id, only_if_banned=True)
                await msg.reply_text(f"‚úÖ –¢–∞–∫–∂–µ —Ä–∞–∑–±–∞–Ω–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ `{escape_markdown_v2(str(chat.id))}` \\(–µ—Å–ª–∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–¥–µ—Å—å\\)\\.", parse_mode='MarkdownV2')
                logger.info(f"Unbanned {target_id} in chat {chat.id}")
            except Exception as e:
                logger.warning(f"Could not unban {target_id} in chat {chat.id} (maybe no rights): {e}")
                await msg.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ \\(–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤\\)\\.", parse_mode='MarkdownV2')
    else:
        await msg.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å {target_info} \\(–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\\)\\.", parse_mode='MarkdownV2')


@admin_only
async def list_banned_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message;
    if not msg: return
    banned_list: List[sqlite3.Row] = await asyncio.to_thread(get_banned_users)
    if not banned_list:
        await msg.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç\\.", parse_mode='MarkdownV2'); return

    parts = ["üö´ *–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –≤ –ë–î:*"]
    MAX_LINES_DISPLAY = 30 # Limit output length
    count = 0
    for entry in banned_list:
        if count >= MAX_LINES_DISPLAY:
            parts.append("\n\\.\\.\\. \\(—Å–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω, –≤—Å–µ–≥–æ: " + escape_markdown_v2(str(len(banned_list))) + "\\)")
            break

        uid = entry['user_id']
        reason_raw = entry['reason'] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        try:
            ban_time_local = time.localtime(entry['banned_at'])
            time_str_raw = time.strftime('%Y-%m-%d %H:%M', ban_time_local)
        except Exception:
            time_str_raw = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

        # Escape dynamic parts
        uid_escaped = escape_markdown_v2(str(uid))
        reason_escaped = escape_markdown_v2(reason_raw)
        time_str_escaped = escape_markdown_v2(time_str_raw)

        # Attempt to get user info for better display name
        user_info_str = f"ID: `{uid_escaped}`" # Default display
        uinfo = await asyncio.to_thread(get_user_info_from_db, uid)
        if uinfo:
            fname = escape_markdown_v2(uinfo['first_name'] or "")
            lname = escape_markdown_v2(uinfo['last_name'] or "")
            uname = escape_markdown_v2(uinfo['username'] or '?')
            user_info_str = f"{fname} {lname} (@{uname}) \\(ID: `{uid_escaped}`\\)"

        parts.append(f"\n\\- {user_info_str}")
        parts.append(f"  _–ü—Ä–∏—á–∏–Ω–∞:_ {reason_escaped}")
        parts.append(f"  _–ö–æ–≥–¥–∞:_ {time_str_escaped}")
        count += 1

    try: await msg.reply_text("\n".join(parts), parse_mode='MarkdownV2')
    except Exception as e:
         logger.error(f"Failed sending banned list MDv2: {e}. Text was:\n{' '.join(parts)}\nSending plain.")
         plain = "\n".join(parts)
         for char in r'_*[]()~`>#+-=|{}.!': plain = plain.replace(f'\\{char}', char)
         plain = plain.replace('*', '').replace('`', '')
         try: await msg.reply_text(plain)
         except Exception as fallback_e: logger.error(f"Failed sending plain banned list: {fallback_e}")


@admin_only
async def set_default_style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user
    if not msg or not user: return
    if not context.args:
        current_style_escaped = escape_markdown_v2(settings.DEFAULT_STYLE)
        await msg.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å \\(–≤ –ø–∞–º—è—Ç–∏\\):\n```\n{current_style_escaped}\n```\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: `/set_default_style <–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å>`", parse_mode='MarkdownV2')
        return
    style = " ".join(context.args).strip()
    if style:
        settings.update_default_style(style) # Updates only in memory
        escaped = escape_markdown_v2(style)
        await msg.reply_text(f"‚úÖ –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω \\(—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\\):\n```\n{escaped}\n```", parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} set global style in memory.")
    else:
        await msg.reply_text("–°—Ç–∏–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\\.", parse_mode='MarkdownV2')

@admin_only
async def set_bot_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message; user = update.effective_user
    if not msg or not user: return
    if not context.args:
        await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞: `/set_bot_name <–∏–º—è>`"); return
    name = " ".join(context.args).strip()
    if name:
        settings.update_bot_name(name) # Update in memory
        # Save to DB
        await asyncio.to_thread(save_bot_settings_to_db, settings.get_settings_dict(), bot_activity_percentage)
        await msg.reply_text(f"‚úÖ –ò–º—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{escape_markdown_v2(settings.BOT_NAME)}* –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\\.", parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} set bot name to '{settings.BOT_NAME}'.")
    else:
        await msg.reply_text("–ò–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\\.", parse_mode='MarkdownV2')

@admin_only
async def set_activity_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_activity_percentage # Modify global var from state
    msg = update.message; user = update.effective_user
    if not msg or not user: return
    if not context.args:
        await msg.reply_text(f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö: *{bot_activity_percentage}%*\\. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é: `/set_activity <%>`", parse_mode='MarkdownV2'); return
    try:
        percent = int(context.args[0])
        if 0 <= percent <= 100:
            bot_activity_percentage = percent
            # Save to DB
            await asyncio.to_thread(save_bot_settings_to_db, settings.get_settings_dict(), bot_activity_percentage)
            await msg.reply_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ *{percent}%* –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\\.", parse_mode='MarkdownV2')
            logger.info(f"Admin {user.id} set activity to {percent}%")
        else:
            await msg.reply_text("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100\\.", parse_mode='MarkdownV2')
    except (ValueError, IndexError):
        await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100\\.", parse_mode='MarkdownV2')

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini ---

@admin_only
async def get_gen_params_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini."""
    msg = update.message
    if not msg: return
    params = settings.GEMINI_GENERATION_CONFIG
    try:
        # Use json.dumps for proper formatting, then escape
        params_str_raw = json.dumps(params, indent=2, ensure_ascii=False)
        params_str_escaped = escape_markdown_v2(params_str_raw)
        await msg.reply_text(f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini:\n```json\n{params_str_escaped}\n```", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"Failed to format/send Gemini params: {e}")
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")


@admin_only
async def set_gen_params_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_gen_params temp=0.6 top_p=0.8)."""
    msg = update.message; user = update.effective_user
    if not msg or not user: return
    if not context.args:
        await msg.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/set_gen_params <–ø–∞—Ä–∞–º–µ—Ç—Ä>=<–∑–Ω–∞—á–µ–Ω–∏–µ> [<–ø–∞—Ä–∞–º–µ—Ç—Ä2>=<–∑–Ω–∞—á–µ–Ω–∏–µ2>...]`\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: `temperature` \\(–∏–ª–∏ `temp`\\), `top_p`, `top_k`\n"
            "–ü—Ä–∏–º–µ—Ä: `/set_gen_params temp=0\\.6 top_p=0\\.8`", # Escape example dots
            parse_mode='MarkdownV2'
        )
        return

    # Start with a copy of the current settings
    new_params = settings.GEMINI_GENERATION_CONFIG.copy()
    applied_changes = {}
    errors = []

    for arg in context.args:
        if '=' not in arg:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \\(–æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ\\): `{escape_markdown_v2(arg)}`")
            continue

        key, value_str = arg.split('=', 1)
        key = key.strip().lower() # Normalize key

        # Map aliases and validate key
        config_key = None
        if key in ['temp', 'temperature']: config_key = 'temperature'
        elif key == 'top_p': config_key = 'top_p'
        elif key == 'top_k': config_key = 'top_k'
        # Add other parameters here if needed, e.g.:
        # elif key == 'max_tokens': config_key = 'max_output_tokens'

        if not config_key:
             errors.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: `{escape_markdown_v2(key)}`")
             continue

        # Try to parse and validate the value based on the key
        try:
            original_value = new_params.get(config_key) # For type checking if needed
            if config_key in ['temperature', 'top_p']:
                value = float(value_str)
                if config_key == 'temperature' and not (0.0 <= value <= 1.0):
                    raise ValueError("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0\\.0 –¥–æ 1\\.0")
                if config_key == 'top_p' and not (0.0 < value <= 1.0): # top_p usually > 0
                    raise ValueError("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0\\.0 –∏ –¥–æ 1\\.0")
            elif config_key == 'top_k':
                value = int(value_str)
                if value <= 0:
                    raise ValueError("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            # Add validation for other types if needed
            # elif config_key == 'max_output_tokens':
            #     value = int(value_str)
            #     if value <= 0 : raise ValueError("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
            else:
                 # Should not happen if key mapping is correct
                 raise ValueError("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è")

            new_params[config_key] = value
            applied_changes[config_key] = value

        except ValueError as e:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è `{escape_markdown_v2(key)}`: {escape_markdown_v2(str(e))}")

    if errors:
        error_message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\\- " + "\n\\- ".join(errors)
        await msg.reply_text(error_message, parse_mode='MarkdownV2')
        return

    if not applied_changes:
        await msg.reply_text("–ù–µ –±—ã–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è \\(–≤–æ–∑–º–æ–∂–Ω–æ, –≤–≤–µ–¥–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è\\)\\.", parse_mode='MarkdownV2')
        return

    # Update settings in memory and save to DB
    settings.GEMINI_GENERATION_CONFIG = new_params
    await asyncio.to_thread(save_bot_settings_to_db, settings.get_settings_dict(), bot_activity_percentage)

    # Report success
    try:
        params_str_raw = json.dumps(settings.GEMINI_GENERATION_CONFIG, indent=2, ensure_ascii=False)
        params_str_escaped = escape_markdown_v2(params_str_raw)
        await msg.reply_text(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n```json\n{params_str_escaped}\n```", parse_mode='MarkdownV2')
        logger.info(f"Admin {user.id} updated Gemini generation params: {applied_changes}")
    except Exception as e:
         logger.error(f"Failed to format/send updated Gemini params: {e}")
         await msg.reply_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\\.")


# --- Provider/Cache Commands ---

@admin_only
async def list_providers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    # Assuming settings.AVAILABLE_PROVIDERS exists and is a list/tuple
    try:
        available_providers = getattr(settings, 'AVAILABLE_PROVIDERS', [])
        if available_providers:
            providers_escaped = "\n".join([f"\\- `{escape_markdown_v2(p)}`" for p in available_providers])
            current_provider_escaped = escape_markdown_v2(settings.LLM_PROVIDER)
            await update.message.reply_text(
                f"üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:*\n{providers_escaped}\n\n"
                f"–¢–µ–∫—É—â–∏–π: *{current_provider_escaped}*",
                parse_mode='MarkdownV2'
            )
        else:
            await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\\.", parse_mode='MarkdownV2')
    except AttributeError:
         await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\\.", parse_mode='MarkdownV2')


@admin_only
async def switch_provider_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    msg = update.message
    if not msg: return
    if not context.args:
        await msg.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: `/switch_provider <–Ω–∞–∑–≤–∞–Ω–∏–µ>`")
        return

    provider_name_input = context.args[0].lower() # Normalize input

    try:
        available_providers = getattr(settings, 'AVAILABLE_PROVIDERS', [])
        if not available_providers:
             await msg.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\\.", parse_mode='MarkdownV2'); return

        if provider_name_input not in available_providers:
            providers_list_escaped = ", ".join(f"`{escape_markdown_v2(p)}`" for p in available_providers)
            await msg.reply_text(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä `{escape_markdown_v2(provider_name_input)}` –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {providers_list_escaped}", parse_mode='MarkdownV2')
            return

        # Assuming settings.LLM_PROVIDER exists
        settings.LLM_PROVIDER = provider_name_input # Update in memory
        # Note: This change is typically NOT saved to DB unless specifically designed to be persistent
        provider_escaped = escape_markdown_v2(settings.LLM_PROVIDER)
        await msg.reply_text(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{provider_escaped}* \\(–¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\\)\\.", parse_mode='MarkdownV2')
        logger.info(f"Admin {msg.from_user.id} switched LLM provider to {settings.LLM_PROVIDER}.")

    except AttributeError:
         await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\\.", parse_mode='MarkdownV2')


@admin_only
async def provider_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    msg = update.message
    if not msg: return

    try:
        stats = metrics.get_stats() # Get stats from your metrics module
        available_providers = getattr(settings, 'AVAILABLE_PROVIDERS', [])

        lines = ["üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:*"]
        if not available_providers:
            lines.append("\n_–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω_")
        else:
            for provider in available_providers:
                # Get stats, default to 0 if provider not in stats dict
                avg_time_raw = stats['average_times'].get(provider, 0.0)
                error_count_raw = stats['error_counts'].get(provider, 0)

                # Format and Escape dynamic parts
                provider_escaped = escape_markdown_v2(provider)
                # Format time to string, THEN escape the string containing the dot
                avg_time_str = f"{avg_time_raw:.3f}" # Format with 3 decimal places
                avg_time_escaped = escape_markdown_v2(avg_time_str)
                errors_escaped = escape_markdown_v2(str(error_count_raw)) # Escape error count

                lines.append(f"\n‚Ä¢ *{provider_escaped}*:")
                lines.append(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time_escaped} —Å–µ–∫") # Use escaped time string
                lines.append(f"  –û—à–∏–±–æ–∫: {errors_escaped}")

        await msg.reply_text("\n".join(lines), parse_mode='MarkdownV2')

    except AttributeError:
        await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (`metrics`) –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"Error getting/sending provider stats: {e}", exc_info=True)
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: `{escape_markdown_v2(str(e))}`", parse_mode='MarkdownV2')


@admin_only
async def clear_cache_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg: return
    try:
        cache.clear() # Call clear method of your cache object
        await msg.reply_text("‚úÖ –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤ LLM —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω\\.", parse_mode='MarkdownV2')
        logger.info(f"Admin {msg.from_user.id} cleared the cache.")
    except AttributeError:
         await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å –∫—ç—à–∞ (`cache`) –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ `clear`\\.", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"Error clearing cache: {e}", exc_info=True)
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: `{escape_markdown_v2(str(e))}`", parse_mode='MarkdownV2')


@admin_only
async def cache_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg: return
    try:
        # Get stats from your cache object attributes
        cache_size = len(cache.cache)
        cache_hits = cache.hits
        cache_misses = cache.misses

        # Escape the numbers (just in case, though unlikely to contain special chars)
        size_escaped = escape_markdown_v2(str(cache_size))
        hits_escaped = escape_markdown_v2(str(cache_hits))
        misses_escaped = escape_markdown_v2(str(cache_misses))

        stats_text = (
            f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {size_escaped}\n"
            f"–ü–æ–ø–∞–¥–∞–Ω–∏–π \\(hits\\): {hits_escaped}\n"
            f"–ü—Ä–æ–º–∞—Ö–æ–≤ \\(misses\\): {misses_escaped}"
        )
        await msg.reply_text(f"üì¶ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ LLM:*\n{stats_text}", parse_mode='MarkdownV2')

    except AttributeError:
        await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å –∫—ç—à–∞ (`cache`) –∏–ª–∏ –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã (`cache`, `hits`, `misses`) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"Error getting/sending cache stats: {e}", exc_info=True)
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: `{escape_markdown_v2(str(e))}`", parse_mode='MarkdownV2')

# --- End of bot_commands.py ---